name: Android CI

# 当代码推送到 main 分支或提交 PR 时触发构建
on:
  push:
    branches:
      - main  # 如果你的主分支名称不是 main，需要修改为相应的分支名称
  pull_request:
  workflow_dispatch:  # 添加手动触发的事件

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: 检出代码
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: 设置 JDK 17，适合 Android Gradle Plugin 要求
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: 缓存 Gradle 构建目录以加速构建
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Step 4: 设置 Android SDK，指定需要的 API 级别和 Build Tools 版本
      - name: Set up Android SDK
        uses: android-actions/setup-android@v2
        with:
          api-level: 33  # 根据你的项目调整
          build-tools: 33.0.2  # 根据你的项目调整

      # Step 5: 赋予 gradlew 执行权限
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Step 6: 运行 Gradle 构建，并启用详细的日志输出
      - name: Build with Gradle
        run: ./gradlew clean assembleRelease --stacktrace --info --scan

      # Step 7: 上传生成的 APK 作为构建工件
      - name: Upload APK
        uses: actions/upload-artifact@v3
        with:
          name: app-release-apk
          path: app/build/outputs/apk/release/app-release.apk
